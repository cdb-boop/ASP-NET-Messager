// <auto-generated />
using System;
using MessagingWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MessagingWebApp.Migrations
{
    [DbContext(typeof(MessagingWebAppDbContext))]
    [Migration("20241124102146_Renamed ReadMessages to UnreadMessages")]
    partial class RenamedReadMessagestoUnreadMessages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MessagingWebApp.Models.Domain.ChatGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UnreadMessages")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("MessagingWebApp.Models.Domain.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChatGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MessageRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatGroupId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MessagingWebApp.Models.Domain.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("Users")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageReaction");
                });

            modelBuilder.Entity("MessagingWebApp.Models.ViewModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChatGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatGroupId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MessagingWebApp.Models.Domain.Message", b =>
                {
                    b.HasOne("MessagingWebApp.Models.Domain.ChatGroup", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatGroupId");
                });

            modelBuilder.Entity("MessagingWebApp.Models.Domain.MessageReaction", b =>
                {
                    b.HasOne("MessagingWebApp.Models.Domain.Message", null)
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("MessagingWebApp.Models.ViewModels.User", b =>
                {
                    b.HasOne("MessagingWebApp.Models.Domain.ChatGroup", null)
                        .WithMany("Users")
                        .HasForeignKey("ChatGroupId");
                });

            modelBuilder.Entity("MessagingWebApp.Models.Domain.ChatGroup", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MessagingWebApp.Models.Domain.Message", b =>
                {
                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
